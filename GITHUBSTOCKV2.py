import requests
import time
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton
import threading
import asyncio
import re
from datetime import datetime, timedelta
import json
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
DISCORD_CHANNEL_ID = "1407975317682917457"
DISCORD_USER_TOKEN = os.getenv('DISCORD_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# === –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ü–û–î–ü–ò–°–ö–ò ===
CHANNEL_USERNAME = "@PlantsVersusBrainrotsSTOCK"
CHANNEL_ID = "-1003166042604"

# –†–∞—Å—Ç–µ–Ω–∏—è
PLANTS_RARITY = {
    "Cactus": "RARE", "Strawberry": "RARE", "Pumpkin": "EPIC", "Sunflower": "EPIC",
    "Dragon Fruit": "LEGENDARY", "Eggplant": "LEGENDARY", "Watermelon": "MYTHIC",
    "Grape": "MYTHIC", "Cocotank": "GODLY", "Carnivorous Plant": "GODLY",
    "Mr Carrot": "SECRET", "Tomatrio": "SECRET", "Shroombino": "SECRET"
}

PLANTS_EMOJI = {
    "Cactus": "üåµ", "Strawberry": "üçì", "Pumpkin": "üéÉ", "Sunflower": "üåª",
    "Dragon Fruit": "üêâ", "Eggplant": "üçÜ", "Watermelon": "üçâ", "Grape": "üçá",
    "Cocotank": "ü••", "Carnivorous Plant": "üåø", "Mr Carrot": "ü•ï",
    "Tomatrio": "üçÖ", "Shroombino": "üçÑ"
}

current_stock = {}
last_restock_time = None
last_message_id = None
user_chat_ids = set()

USERS_FILE = "users.json"

telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
telegram_bot = telegram_app.bot

keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üéØ–£–ó–ù–ê–¢–¨ –°–¢–û–öüéØ")]],
    resize_keyboard=True
)

async def check_subscription(user_id):
    try:
        member = await telegram_bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            return True
        else:
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return True

def create_subscription_message():
    text = """
üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–æ–∫—É –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –í –∫–∞–Ω–∞–ª–µ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö Plants Vs Brainrots

üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å—Ç–æ–∫–µ
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
‚Ä¢ –ü–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞–π—Ç–µ –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
    """
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/PlantsVersusBrainrotsSTOCK")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    
    return text, keyboard

async def show_current_stock(user_id, context):
    print("üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
    
    latest_message = get_latest_discord_message()
    
    if latest_message:
        embeds = latest_message.get('embeds', [])
        for embed in embeds:
            if embed.get('title') == 'SEEDS SHOP RESTOCK!':
                message_timestamp = latest_message.get('timestamp')
                stock_data, time_info = extract_stock_info_from_embed(embed, message_timestamp)
                
                if stock_data:
                    global current_stock, last_restock_time
                    current_stock = stock_data
                    last_restock_time = time_info
                    
                    telegram_message = create_telegram_message(stock_data, time_info, is_alert=False)
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=telegram_message,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫")
                    return
        
        await context.bot.send_message(
            chat_id=user_id,
            text="üì≠ –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å—Ç–æ–∫–∞",
            reply_markup=keyboard
        )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            reply_markup=keyboard
        )

async def handle_subscription_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id)
    
    if is_subscribed:
        try:
            await query.message.delete()
        except:
            pass
        
        add_user(user_id)
        await show_current_stock(user_id, context)
        
    else:
        text, reply_markup = create_subscription_message()
        await query.edit_message_text(
            "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n" + text,
            reply_markup=reply_markup
        )

def load_users():
    global user_chat_ids
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r') as f:
                data = json.load(f)
                user_chat_ids = set(data.get('users', []))
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        user_chat_ids = set()

def save_users():
    try:
        with open(USERS_FILE, 'w') as f:
            json.dump({'users': list(user_chat_ids)}, f)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(user_chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def add_user(chat_id):
    if chat_id not in user_chat_ids:
        user_chat_ids.add(chat_id)
        save_users()
        print(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")

def get_latest_discord_message():
    headers = {
        'Authorization': DISCORD_USER_TOKEN,
        'Content-Type': 'application/json',
    }
    
    url = f'https://discord.com/api/v9/channels/{DISCORD_CHANNEL_ID}/messages?limit=1'
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            messages = response.json()
            if messages:
                return messages[0]
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def convert_to_msk(discord_time_str):
    try:
        if "@" in discord_time_str:
            date_part, time_part = discord_time_str.split('@')
            day, month, year = date_part.strip().split('/')
            hour, minute = time_part.strip().replace('GMT', '').strip().split(':')
            
            dt_utc = datetime(int(year), int(month), int(day), int(hour), int(minute))
            dt_msk = dt_utc + timedelta(hours=3)
            return dt_msk.strftime("%d/%m/%Y %H:%M")
        else:
            return discord_time_str
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return discord_time_str

def extract_stock_info_from_embed(embed, message_timestamp):
    stock_data = {}
    current_time = ""
    
    author = embed.get('author', {})
    if author and 'name' in author:
        author_name = author['name']
        if "‚è≥" in author_name:
            discord_time = author_name.replace('‚è≥', '').strip()
            current_time = convert_to_msk(discord_time)
            print(f"‚è∞ –í—Ä–µ–º—è –∏–∑ Discord: {discord_time} -> –ú–°–ö: {current_time}")
    
    if not current_time:
        current_time = datetime.now().strftime("%d/%m/%Y %H:%M")
        print(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {current_time}")
    
    fields = embed.get('fields', [])
    for field in fields:
        plant_name = field.get('name', '')
        plant_value = field.get('value', '')
        
        clean_plant_name = re.sub(r'[^\w\s]', '', plant_name).strip()
        
        stock_match = re.search(r'\+\d+', plant_value)
        if stock_match:
            stock_count = int(stock_match.group(0).replace('+', ''))
            
            for known_plant in PLANTS_RARITY.keys():
                if known_plant.lower() in clean_plant_name.lower():
                    stock_data[known_plant] = stock_count
                    print(f"‚úÖ {known_plant}: {stock_count} —à—Ç")
                    break
    
    return stock_data, current_time

def create_telegram_message(stock_data, time_info, is_alert=False):
    if not stock_data:
        return "üì≠ –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ"
    
    if is_alert:
        message_text = "üî• **–ù–û–í–´–ô –°–¢–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!** üî•\n\n"
    else:
        message_text = "‚òîÔ∏è **–ê–ö–¢–£–ê–õ–¨–ù–´–ô –°–¢–û–ö** ‚òîÔ∏è\n\n"
    
    message_text += f"‚è∞ *–û–±–Ω–æ–≤–ª–µ–Ω–æ: {time_info} –ú–°–ö*\n\n"
    message_text += "üéØ **–î–û–°–¢–£–ü–ù–´–ï –†–ê–°–¢–ï–ù–ò–Ø:**\n\n"
    
    rarity_groups = {}
    for plant, stock in stock_data.items():
        rarity = PLANTS_RARITY.get(plant)
        if rarity not in rarity_groups:
            rarity_groups[rarity] = []
        rarity_groups[rarity].append((plant, stock))
    
    rarity_order = ["RARE", "EPIC", "LEGENDARY", "MYTHIC", "GODLY", "SECRET"]
    
    for rarity in rarity_order:
        if rarity in rarity_groups and rarity_groups[rarity]:
            message_text += f"üåü **{rarity}**\n"
            for plant, stock in rarity_groups[rarity]:
                emoji = PLANTS_EMOJI.get(plant, "üå±")
                message_text += f"‚îú‚îÄ {emoji} {plant} √ó{stock}\n"
            message_text += "\n"
    
    message_text += "‚ö° –£—Å–ø–µ–π –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏!\n\n"
    message_text += "üì¢ *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É:*\n"
    message_text += "üëâ –ö–∞–Ω–∞–ª: @PlantsVersusBrainrotsSTOCK\n"
    message_text += "üí¨ –ß–∞—Ç: @PlantsVersusBrainrotSTOCKCHAT"
    
    return message_text

async def send_telegram_alert_to_all(message):
    if not user_chat_ids:
        print("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    
    sent_count = 0
    error_count = 0
    
    print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for chat_id in list(user_chat_ids):
        try:
            is_subscribed = await check_subscription(chat_id)
            if is_subscribed:
                await telegram_bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='Markdown'
                )
                sent_count += 1
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            error_count += 1
            user_chat_ids.discard(chat_id)
    
    save_users()
    print(f"üìä –ò—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –æ—à–∏–±–æ–∫: {error_count}")

def monitor_discord():
    global current_stock, last_restock_time, last_message_id
    
    print("üïµÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Discord –∫–∞–Ω–∞–ª–∞...")
    
    initial_message = get_latest_discord_message()
    if initial_message:
        last_message_id = initial_message['id']
        print(f"üìù –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_message_id}")
    
    while True:
        try:
            message = get_latest_discord_message()
            
            if message:
                current_message_id = message['id']
                
                if current_message_id != last_message_id:
                    print(f"üÜï –û–ë–ù–ê–†–£–ñ–ï–ù–û –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï: {current_message_id}")
                    last_message_id = current_message_id
                    
                    embeds = message.get('embeds', [])
                    for embed in embeds:
                        if embed.get('title') == 'SEEDS SHOP RESTOCK!':
                            print("üéØ –ù–ê–ô–î–ï–ù –°–¢–û–ö –í EMBED!")
                            
                            message_timestamp = message.get('timestamp')
                            stock_data, time_info = extract_stock_info_from_embed(embed, message_timestamp)
                            
                            if stock_data:
                                print(f"üìä –û–ë–ù–ê–†–£–ñ–ï–ù –ù–û–í–´–ô –°–¢–û–ö! –†–∞—Å—Ç–µ–Ω–∏—è: {list(stock_data.keys())}")
                                
                                current_stock = stock_data
                                last_restock_time = time_info
                                
                                telegram_message = create_telegram_message(stock_data, time_info, is_alert=True)
                                
                                print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
                                
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(send_telegram_alert_to_all(telegram_message))
                                loop.close()
                                
                            else:
                                print("üì≠ –í embed –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö")
            
            time.sleep(10)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(30)

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üéØ –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–æ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id)
    
    if not is_subscribed:
        text, reply_markup = create_subscription_message()
        await update.message.reply_text(text, reply_markup=reply_markup)
        return
    
    add_user(update.message.chat_id)
    
    latest_message = get_latest_discord_message()
    
    if latest_message:
        embeds = latest_message.get('embeds', [])
        for embed in embeds:
            if embed.get('title') == 'SEEDS SHOP RESTOCK!':
                message_timestamp = latest_message.get('timestamp')
                stock_data, time_info = extract_stock_info_from_embed(embed, message_timestamp)
                
                if stock_data:
                    global current_stock, last_restock_time
                    current_stock = stock_data
                    last_restock_time = time_info
                    
                    telegram_message = create_telegram_message(stock_data, time_info, is_alert=False)
                    await update.message.reply_text(
                        telegram_message, 
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫")
                    return
        
        await update.message.reply_text("üì≠ –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å—Ç–æ–∫–∞", reply_markup=keyboard)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id)
    
    if not is_subscribed:
        text, reply_markup = create_subscription_message()
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Plants Vs Brainrots!\n\n" + text,
            reply_markup=reply_markup
        )
        return
    
    add_user(update.message.chat_id)
    
    welcome_text = """
ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ–∫–∞ Plants Vs Brainrots

üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∫–∞
üîî –ü—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–æ–∫–µ
üéØ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫

üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: @PlantsVersusBrainrotsSTOCK
üí¨ –ù–∞—à —á–∞—Ç: @PlantsVersusBrainrotSTOCKCHAT
    """
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id)
    
    if not is_subscribed:
        text, reply_markup = create_subscription_message()
        await update.message.reply_text(text, reply_markup=reply_markup)
        return
    
    add_user(update.message.chat_id)
    
    if update.message.text == "üéØ–£–ó–ù–ê–¢–¨ –°–¢–û–öüéØ":
        await handle_button_click(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞ üéØ", reply_markup=keyboard)

def run_telegram_bot():
    telegram_app.add_handler(CommandHandler("start", start_command))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    telegram_app.add_handler(CallbackQueryHandler(handle_subscription_check, pattern="check_subscription"))
    print("üì± –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    telegram_app.run_polling()

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    load_users()
    print(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    discord_thread = threading.Thread(target=monitor_discord, daemon=True)
    discord_thread.start()
    
    run_telegram_bot()

if __name__ == "__main__":
    main()
